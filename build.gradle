buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

group = 'com.github.JiangGuangxing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    jcenter()
}

configurations {
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-freemarker')
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-redis:1.4.7.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-starter-config:1.2.2.RELEASE'
    compile 'mysql:mysql-connector-java:6.0.6'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.6.0'
    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.1'
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.8.2'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.39'
    compile group: 'tk.mybatis', name: 'mapper-spring-boot-starter', version: '1.1.5'
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task dev {

}
task pre {
    doLast {
        replace("src/main/resources/bootstrap.yml", ['profile: test': 'profile: pre'])
    }
}

task prod {
    doLast {
        replace("src/main/resources/bootstrap.yml", ['profile: test': 'profile: prod'])
    }
}

def replace(fileName, map) {
    def fl = file(fileName)
    def content = fl.getText("UTF-8")
    map.each { k, v -> content = content.replace(k, v) }
    fl.write(content, "UTF-8")
}
